{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": ["plugin:react/recommended", "airbnb", "prettier", "next"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": ["react", "@typescript-eslint"],
  "rules": {
    "no-nested-ternary": "off",
    "jsx-a11y/anchor-is-valid": "off",
    "react/prop-types": "off",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": ["error"],
    "react/react-in-jsx-scope": "off",
    "react/jsx-props-no-spreading": "off",
    "react/jsx-filename-extension": [1, { "extensions": [".ts", ".tsx"] }],
    "react/function-component-definition": [
      2,
      { "namedComponents": "arrow-function" }
    ],
    "react/require-default-props": "off",
    "react/no-unused-prop-types": "off",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "TSTypeReference[typeName.name=/^(Plugin|PluginKey)$/]:not([typeParameters])",
        "message": "Please provide a generic to avoid implicit `any`"
      },
      {
        "selector": "TSTypeReference[typeName.name=/^(Plugin|PluginKey)$/][typeParameters.params.0.type=TSAnyKeyword]",
        "message": "Please replace `any` with a specific type"
      },
      {
        "selector": "NewExpression[callee.name=/^(Plugin|PluginKey)$/]:not([typeParameters])",
        "message": "Please provide a generic to avoid implicit `any`"
      },
      {
        "selector": "NewExpression[callee.name=/^(Plugin|PluginKey)$/][typeParameters.params.0.type=TSAnyKeyword]",
        "message": "Please replace `any` with a specific type"
      }
    ],
    "no-unused-vars": [
      "error",
      {
        "args": "all", // check all args, not just those after-used
        "argsIgnorePattern": "^_+",
        "varsIgnorePattern": "^_+"
      }
    ]
  },
  "overrides": [
    {
      "files": ["*.tsx", "*.ts"],
      "rules": {
        "react/jsx-filename-extension": "off",
        "import/extensions": "off",
        "import/prefer-default-export": "off"
      }
    }
  ],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  }
}
